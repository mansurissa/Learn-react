{"version":3,"sources":["Nav.js","home.js","about.js","context/GlobalReducer.js","context/GlobalState.js","shop.js","single.js","App.js","serviceWorker.js","index.js"],"names":["Nav","className","to","Home","About","GlobalReducer","state","action","type","products","payload","initialState","GlobalContext","createContext","GlobalState","children","useReducer","dispatch","Provider","value","setProducts","Shop","useContext","useEffect","a","fetch","fetchItems","json","data","console","log","map","product","key","itemId","href","item","name","Single","props","useState","setData","fetched","filter","match","params","found","src","images","information","alt","App","path","exact","component","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.468db653.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst Nav = () => {\r\n  return (\r\n    <div>\r\n      <nav>\r\n        <h3>LOGO</h3>\r\n        <ul className=\"nav-links\">\r\n          <Link to=\"/\" className=\"link-styles\">\r\n            <li>Home</li>\r\n          </Link>\r\n          <Link to=\"/about\" className=\"link-styles\">\r\n            <li>About</li>\r\n          </Link>\r\n          <Link to=\"/shop\" className=\"link-styles\">\r\n            <li>Shop</li>\r\n          </Link>\r\n        </ul>\r\n      </nav>\r\n    </div>\r\n  );\r\n};\r\nexport default Nav;\r\n","import React from \"react\";\r\n\r\nconst Home = () => {\r\n  return <div>this home and we gonna learn react router</div>;\r\n};\r\nexport default Home;\r\n","import React from \"react\";\r\n\r\nconst About = () => {\r\n  return <div> This is About us page</div>;\r\n};\r\nexport default About;\r\n","export const GlobalReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case \"ADD_PRODUCT\":\r\n      return {\r\n        ...state,\r\n        products: action.payload,\r\n      };\r\n\r\n    default:\r\n      break;\r\n  }\r\n};\r\n","import React, { createContext, useReducer } from \"react\";\r\nimport { GlobalReducer } from \"./GlobalReducer\";\r\n\r\nconst initialState = {\r\n  products: [],\r\n};\r\nexport const GlobalContext = createContext(initialState);\r\n\r\nconst GlobalState = ({ children }) => {\r\n  const [state, dispatch] = useReducer(GlobalReducer, initialState);\r\n\r\n  const setProducts = (products) => {\r\n    dispatch({\r\n      type: \"ADD_PRODUCT\",\r\n      payload: products,\r\n    });\r\n  };\r\n  return (\r\n    <GlobalContext.Provider value={{ ...state, setProducts }}>\r\n      {children}\r\n    </GlobalContext.Provider>\r\n  );\r\n};\r\nexport default GlobalState;\r\n","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, { useEffect, useContext } from \"react\";\r\nimport { GlobalContext } from \"./context/GlobalState\";\r\n\r\nconst Shop = () => {\r\n  const { products, setProducts } = useContext(GlobalContext);\r\n  // const fetchData = ;\r\n  useEffect(() => {\r\n    // fetchData();\r\n    (async () => {\r\n      const fetchItems = await fetch(\r\n        \"https://fortnite-api.theapinetwork.com/store/get\"\r\n      );\r\n      const { data } = await fetchItems.json();\r\n      setProducts(data);\r\n    })();\r\n  }, []);\r\n  console.log(\"rendered shop\");\r\n  return (\r\n    <div>\r\n      {products.map((product) => (\r\n        <a key={product.itemId} href={`/shop/${product.itemId}`}>\r\n          <h2>{product.item.name}</h2>\r\n        </a>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\nexport default Shop;\r\n","import React, { useEffect, useState, useContext } from \"react\";\r\nimport { GlobalContext } from \"./context/GlobalState\";\r\n\r\nconst Single = (props) => {\r\n  const [data, setData] = useState([]);\r\n  const { products } = useContext(GlobalContext);\r\n  console.log(products);\r\n  useEffect(() => {\r\n    (async () => {\r\n      const fetched = await fetch(\r\n        \"https://fortnite-api.theapinetwork.com/store/get\"\r\n      );\r\n      const products = await fetched.json();\r\n      const [found] = products.data.filter(\r\n        (product) => product.itemId === props.match.params.itemId\r\n      );\r\n      setData(found);\r\n    })();\r\n  }, [props]);\r\n\r\n  return (\r\n    <div>\r\n      {data.item && (\r\n        <>\r\n          <h1>{data.item.name}</h1>\r\n          <h2>{data.item.type}</h2>\r\n          <img src={data.item.images.information} alt={data.item.name} />\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\nexport default Single;\r\n","import React from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport \"./App.css\";\nimport Nav from \"./Nav\";\nimport Home from \"./home\";\nimport About from \"./about\";\nimport Shop from \"./shop\";\nimport Single from \"./single\";\nimport GlobalState from \"./context/GlobalState\";\n\nconst App = () => {\n  return (\n    <GlobalState>\n      <Router>\n        <Nav />\n        <Switch>\n          <Route path=\"/\" exact component={Home} />\n          <Route path=\"/shop\" exact component={Shop} />\n          <Route path=\"/about\" component={About} />\n          <Route path=\"/shop/:itemId\" component={Single} />\n        </Switch>\n      </Router>\n    </GlobalState>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}